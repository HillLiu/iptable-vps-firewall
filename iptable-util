#!/bin/bash
IF="/sbin/ifconfig"
IP_SAVE_FILE="/dev/shm/iptables.save"
PACKETS_LIMIT=1mb
PACKETS_BURST=512mb

dump ()
{
    echo ""
    echo "###"
    echo "# $1"
    echo "###"
    echo ""
}

usage()
{
  echo -n "
iptable-util -e eth0 -o \"80 443\" -t \"1.1.1.1 2.2.2.2\"

Use this script careful, it possible deny all your connections.
More sample usage. https://github.com/HillLiu/iptable-vps-firewall/wiki/sample

 Options:
  -h, --help                  Display this help and exit.
  -e, --external-interface    External Network.
  -i, --internal-interface    Internal Network.
  -o, --open-port             Open Port.
  -t, --trust                 Trust host.
  -c, --cmd                   Iptable command path.
  -l, --list                  Current rule list.
  -d, --debug                 Reset after 60sec.
      --debug-sec             Reset after \$n sec.
      --docker-port           Docker Port.
      --ftp                   Enable FTP.
      --save                  Store rules.
      --stop                  Reset all rule and make all accept.
      --info                  Display information only.
      --limit                 Limit packets with second
      --burst                 Execute limit when exceed burst
"
}

hexToDecIp()
{
  n=$(echo $(($1)))
  n1=$(($n >> 24))
  n2=$(( ($n >> 16) & 0xFF))
  n3=$(( ($n >> 8) & 0xFF))
  n4=$(($n & 0xFF))

  DEC_IP=$(printf "%d.%d.%d.%d" $n1 $n2 $n3 $n4)
}

netinfo ()
{
    IP=""
    MASK=""
    NET=""

    for NIC in "$@" ; do
        {
        IP=`$IF $NIC | sed -n -E 's/(inet |inet addr)/\1/p' | awk '{print $2}' | sed -e "s/addr\://"`
        MASK=`$IF $NIC | sed -n -E 's/(inet |inet addr)/\1/p' | awk '{print $4}' | sed -e "s/Mask\://"`
        IP1=`echo $IP |awk -F'.' '{print $1}'`
        if [ "$IP1" = "" ]; then
          echo ""
          echo "Warning: there is no IP found on $NIC."
          echo "Action is aborted."
          echo "Please make sure the interface is setup properly, then try again."
          echo ""
          exit 1
        else
          IP2=`echo $IP |awk -F'.' '{print $2}'`
          IP3=`echo $IP |awk -F'.' '{print $3}'`
          IP4=`echo $IP |awk -F'.' '{print $4}'`
          MASK2=`echo $MASK |awk -F'.' '{print $2}'`
          if [ -z $MASK2 ]; then
            hexToDecIp $MASK
            MASK=$DEC_IP
            MASK2=`echo $MASK |awk -F'.' '{print $2}'`
          fi
          MASK1=`echo $MASK |awk -F'.' '{print $1}'`
          MASK3=`echo $MASK |awk -F'.' '{print $3}'`
          MASK4=`echo $MASK |awk -F'.' '{print $4}'`
          let NET1="$IP1 & $MASK1"
          let NET2="$IP2 & $MASK2"
          let NET3="$IP3 & $MASK3"
          let NET4="$IP4 & $MASK4"
          NET="$NET1.$NET2.$NET3.$NET4"
        fi
        }
    done
}

initialize ()
{
    $IPCMD -P INPUT   ACCEPT
    $IPCMD -P OUTPUT  ACCEPT
    $IPCMD -P FORWARD ACCEPT
    $IPCMD -F
    $IPCMD -X
    $IPCMD -t nat -F
    $IPCMD -t nat -X
    $IPCMD -t mangle -F
    $IPCMD -t mangle -X
    $IPCMD -Z
}

initNAT ()
{
  echo ""
  echo "## NAT From IP ##"
  echo $NAT_FROM_IP
  echo "## NAT From Port ##"
  echo $NAT_FROM_PORT
  echo "## NAT To IP ##"
  echo $NAT_TO_IP
  echo "## NAT To Port ##"
  echo $NAT_TO_PORT
  echo ""
  $IPCMD -A INPUT -p icmp --icmp-type 8 -s 0/0 -d $NAT_FROM_IP -m state --state NEW,ESTABLISHED,RELATED -j PING_OF_DEATH
  $IPCMD -A PREROUTING -t nat -p tcp --source $NAT_FROM_IP --dport $NAT_FROM_PORT -j DNAT --to $NAT_TO_IP:$NAT_TO_PORT
}

apply_ftp ()
{
  ###
  # FTP Active mode
  ###
  modprobe ip_conntrack
  modprobe ip_conntrack_ftp
  $IPCMD -A OUTPUT -p tcp --sport $HI -m multiport --dports 20,$HI -m state --state ESTABLISHED -j ACCEPT
  $IPCMD -A OUTPUT -p tcp -m tcp --sport $HI -m multiport --dports 21,$HI -m state --state NEW,ESTABLISHED -j ACCEPT
  $IPCMD -A OUTPUT -p tcp -m tcp --sport $HI --dport $HI -m state --state NEW,RELATED -j ACCEPT
  $IPCMD -A INPUT -p tcp --sport 20 --dport $HI -m state --state ESTABLISHED,RELATED -j ACCEPT
  $IPCMD -A INPUT -p tcp -m tcp -m multiport --sports 21,$HI --dport $HI -m state --state ESTABLISHED -j ACCEPT
}


while [[ $# -gt 0 ]];  do
    key="$1"
    case $key in
        -h|--help)
        usage
        exit 0;
	;;
	-e|--external-interface)
	EXT_IF="$2"
	shift # past argument
	;;
	-i|--internal-interface)
	INT_IF="$2"
	shift # past argument
	;;
	-o|--open-port)
	OPEN_PORT="$2"
	shift # past argument
	;;
	-t|--trust)
	ALLOW_HOSTS="$2"
	shift # past argument
	;;
	-c|--cmd)
	IPCMD="$2"
	shift # past argument
	;;
	-l|--list)
        LIST_RULES_ONLY=on
	;;
	-d|--debug)
        DEBUG_ONLY=on
	;;
	--debug-sec)
        DEBUG_ONLY=on
        DEBUG_SEC=$2
	shift # past argument
	;;
	--nat)
        NAT_FROM_IP="$2"
        NAT_FROM_PORT="$3"
        NAT_TO_IP="$4"
        NAT_TO_PORT="$5"
	shift # past argument
	shift # past argument
	shift # past argument
	shift # past argument
	;;
        --docker-port)
        DOCKER_OPEN_PORT="$2"
	shift # past argument
        ;;
        --limit)
        PACKETS_LIMIT="$2"
	shift # past argument
        ;;
        --burst)
        PACKETS_BURST="$2"
	shift # past argument
        ;;
	--info)
        SHOW_INFO_ONLY=on
	;;
	--stop)
        RESET_ONLY=on
	;;
	--save)
        SAVE_ONLY=on
	;;
	--ftp)
        FTP=on
	;;
	*)
        # unknown option
	;;
    esac
    shift # past argument or value
done

if [ "$(whoami)" != "root" ]; then
    dump "Sorry, you are not root."
    exit 1
fi

## Check if iptalbe exists 
if [ -z "$IPCMD" ] ; then
    IPCMD="iptables";
fi
CHK_IPTABLES=$(which $IPCMD 2>/dev/null)
if [ -z "$CHK_IPTABLES" ]; then
    dump "$(basename $0): iptables program is not found."
    exit 1
fi

if [ -n "$LIST_RULES_ONLY" ] ; then
    dump "Rule List"
    $IPCMD -L -n
    echo ""
    dump "Nat Rule List"
    $IPCMD -t nat -L
    echo ""
    dump "Command List"
    $IPCMD -S -t nat | xargs -I{} echo "-t nat {}"
    $IPCMD -S
    echo ""
    exit 0
fi

if [ -n "$SAVE_ONLY" ] ; then
  $IPCMD -S -t nat | sed -n -E 's/^(-A|-N)/\1/p'| sed -e 's/"/\\"/g' | xargs -I{} echo "-t nat {}" > $IP_SAVE_FILE
  $IPCMD -S | sed -n -E 's/^(-A|-N)/\1/p' >> $IP_SAVE_FILE
  cat $IP_SAVE_FILE
  exit 0
fi

if [ -n "$RESET_ONLY" ] ; then
    dump "Reset only"
    initialize
    $IPCMD -S
    exit 0
fi

if [ -z "$EXT_IF" ] ; then
  if [ -z "$NAT_FROM_IP"] ; then 
    dump "External Interface should not be empty"
  else
    initNAT    
  fi
  exit 1
fi

if [ -z "$INT_IF" ] ; then
    INT_IF=$EXT_IF;
fi

dump "Paramters"

echo "# External Interface:"
echo $EXT_IF 
echo "" 

echo "# Internal Interface:"
echo $INT_IF 
echo "" 

if [ "${OPEN_PORT}" ] ; then
    echo "# Open Ports:"
    for port in ${OPEN_PORT[@]} ; do
        echo $port 
    done
    echo ""
fi

echo "# Iptable command-line path:"
echo $IPCMD 
echo "" 

if [ "${ALLOW_HOSTS}" ] ; then
    echo "# Trust Hosts:"
    for allow_host in ${ALLOW_HOSTS[@]} ; do
        echo $allow_host 
    done
    echo ""
fi

## default
initialize
HI="1024:65535"

## External 
netinfo "$EXT_IF"
EXT_IP="$IP"
EXT_NET="$NET"/"$MASK"

echo ""
echo "## External IP ##"
echo $EXT_IP
echo "## External Net ##"
echo $EXT_NET
echo ""

## Internal 
netinfo "$INT_IF"
INT_IP="$IP"
INT_NET="$NET"/"$MASK"

echo "## Internal IP ##"
echo $INT_IP
echo "## Internal Net ##"
echo $INT_NET
echo ""

if [ -n "$SHOW_INFO_ONLY" ] ; then
    exit 0
fi

dump "Start to apply firewall... Press ctrl+c to cancel."
sleep 3;

## Default drop all
$IPCMD -P INPUT DROP
$IPCMD -P FORWARD DROP

## Allow lo
$IPCMD -A INPUT -i lo -j ACCEPT
$IPCMD -A OUTPUT -o lo -j ACCEPT

## Allow internal
ARR_FORWARD=(docker0 cbr0);
if [ "$INT_IF" != "$EXT_IF" ] ; then
  ARR_FORWARD+=($INT_IF)
fi
for internal in ${ARR_FORWARD[@]} ; do
  $IPCMD -A INPUT -i $internal -j ACCEPT
  $IPCMD -A OUTPUT -o $internal -j ACCEPT
  $IPCMD -A FORWARD -i $internal -j ACCEPT
  $IPCMD -A FORWARD -o $internal -j ACCEPT
done

###
# Allow trust
###
if [ "${ALLOW_HOSTS}" ] ; then
    for allow_host in ${ALLOW_HOSTS[@]} ; do
	$IPCMD -A INPUT -s $allow_host -j ACCEPT
	$IPCMD -A OUTPUT -d $allow_host -j ACCEPT
	$IPCMD -A FORWARD -s $allow_host -j ACCEPT
	$IPCMD -A FORWARD -d $allow_host -j ACCEPT
    done
fi

###
# Restore Docker rules etc
###
if [ -e "$IP_SAVE_FILE" ]; then
  cat $IP_SAVE_FILE | sed -e 's/"/\\"/g' | xargs -I{} echo $IPCMD {} | bash
fi

###
# Defend ping-of-death
###
$IPCMD -N PING_OF_DEATH
$IPCMD -A PING_OF_DEATH -p icmp \
         -m hashlimit \
         --hashlimit-name icmp \
         --hashlimit-mode srcip \
         --hashlimit-htable-expire 10000 \
         --hashlimit-htable-gcinterval 5000 \
         --hashlimit-upto 15/m \
         --hashlimit-burst 5 \
         -j ACCEPT
$IPCMD -A PING_OF_DEATH -j LOG --log-prefix "IPTABLES ( ping of death ):"
$IPCMD -A PING_OF_DEATH -p icmp -j DROP
$IPCMD -A INPUT -p icmp --icmp-type 8 -s 0/0 -d $EXT_IP -m state --state NEW,ESTABLISHED,RELATED -j PING_OF_DEATH

###
# Defend sync flood
###
if [ "x-1" != "x$PACKETS_BURST" ]; then
  PACKETS_BURST="--hashlimit-burst ${PACKETS_BURST}"
else
  PACKETS_BURST=""
fi  
$IPCMD -N synFlood
$IPCMD -A synFlood -p tcp --syn \
         -m hashlimit \
         --hashlimit-name _synFlood \
         --hashlimit-mode srcip \
         --hashlimit-htable-expire 30000 \
         --hashlimit-htable-gcinterval 10000 \
         --hashlimit-upto ${PACKETS_LIMIT}/s $PACKETS_BURST \
         -j RETURN
$IPCMD -A synFlood -j LOG --log-prefix "IPTABLES ( syn flood ):"
$IPCMD -A synFlood -p tcp -j REJECT --reject-with tcp-reset
$IPCMD -A INPUT -p tcp -m state --state NEW -j synFlood

###
# Drop Port Scan 
###
$IPCMD -N PORT_SCAN 
$IPCMD -A PORT_SCAN -p tcp \
         -m hashlimit \
         --hashlimit-name _port_scan \
         --hashlimit-mode srcip \
         --hashlimit-htable-expire 10000 \
         --hashlimit-htable-gcinterval 5000 \
         --hashlimit-upto 15/m \
         --hashlimit-burst 10 \
         -j RETURN
$IPCMD -A PORT_SCAN -j LOG --log-prefix "IPTABLES ( port scan ):"
$IPCMD -A PORT_SCAN -p tcp -j DROP

## 
# Port Scan 
##
$IPCMD -N tcp_packets
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL FIN,URG,PSH -j LOG --log-prefix "IPTABLES (NMAP FIN/URG/PSH):"
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "IPTABLES (Xmas Tree):"
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOG --log-prefix "IPTABLES (Another Xmas Tree):"
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "IPTABLES (Null Scan):"
$IPCMD -A tcp_packets -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "IPTABLES (SYN/RST):"
$IPCMD -A tcp_packets -p tcp --tcp-flags SYN,FIN SYN,FIN -j LOG --log-prefix "IPTABLES (SYN/FIN):"
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL FIN,URG,PSH -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL ALL -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags ALL NONE -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
$IPCMD -A tcp_packets -p tcp --tcp-flags SYN,ACK,FIN,RST RST -j PORT_SCAN 
$IPCMD -A INPUT -p tcp -j tcp_packets
$IPCMD -A FORWARD -p tcp -j tcp_packets

## 
# Allow forward chain
##
$IPCMD -N allowed
$IPCMD -A allowed -p tcp --syn -j ACCEPT
$IPCMD -A allowed -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPCMD -A allowed -p tcp -j LOG --log-prefix "IPTABLES ( invalid forward ):"
$IPCMD -A allowed -p tcp -j DROP
## !!! Important !!! these tcp packet rules need put after allowd chain
$IPCMD -N tcp_forward
$IPCMD -A tcp_forward -p tcp -s 0/0 --dport $HI -j allowed
for allow_port in $OPEN_PORT; do
  echo "Allow forward port: $allow_port"
  echo ""
  $IPCMD -A tcp_forward -p tcp -s 0/0 --dport $allow_port -j allowed
done
$IPCMD -A FORWARD -p tcp -j tcp_forward

## 
# Restrict Docker
##

COMMON_PORT="80 443"
if [ "${DOCKER_OPEN_PORT}" ] ; then
  ALL_DOCKER_OPEN_PORT=("${DOCKER_OPEN_PORT[@]}" "${COMMON_PORT[@]}")
else
  ALL_DOCKER_OPEN_PORT=${COMMON_PORT}
fi

PRIVATE=(
  "10.0.0.0/8"
  "172.16.0.0/12"
  "192.168.0.0/16"
)
if [ "${ALLOW_HOSTS}" ] ; then
  trustAndPrivate=("${ALLOW_HOSTS[@]}" "${PRIVATE[@]}")
else
  trustAndPrivate=PRIVATE
fi

$IPCMD -N DOCKER-USER


for private in ${trustAndPrivate[@]} ; do
  echo "docker trust host: $private"
  $IPCMD -I DOCKER-USER -j DROP -i $EXT_IF -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d $private
  $IPCMD -I DOCKER-USER -j DROP -i $EXT_IF -p udp -m udp --dport 0:32767 -d $private
  $IPCMD -I DOCKER-USER -j LOG --log-prefix "IPTABLES ( docker-user tcp ):" -i $EXT_IF -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -d $private
  $IPCMD -I DOCKER-USER -j LOG --log-prefix "IPTABLES ( docker-user udp ):" -i $EXT_IF -p udp -m udp --dport 0:32767 -d $private
  $IPCMD -I DOCKER-USER -j ACCEPT -s $private
done
echo ""

for allow_port in ${ALL_DOCKER_OPEN_PORT[@]}; do
  echo "docker port: $allow_port"
  $IPCMD -I DOCKER-USER -i $EXT_IF -p tcp -m tcp --dport $allow_port -j ACCEPT 
done
echo ""


## Drop illegal connection
$IPCMD -A OUTPUT -m state --state INVALID -j LOG --log-prefix "IPTABLES ( invalid OUTPUT ):"
$IPCMD -A OUTPUT -m state --state INVALID -j DROP

###
# Enalbe internal routing
###
if [ "$INT_IF" != "$EXT_IF" ] ; then
   $IPCMD -t nat -P PREROUTING  ACCEPT
   $IPCMD -t nat -P POSTROUTING ACCEPT
   $IPCMD -t nat -A POSTROUTING -s $INT_NET -j SNAT --to-source $EXT_IP
   $IPCMD -t nat -A POSTROUTING -o $EXT_IF -s $INT_NET -j MASQUERADE
fi

## Wrap packet
$IPCMD -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPCMD -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPCMD -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

## Enable OPEN_PORT
if [ -n "$FTP" ] ; then
   apply_ftp 
fi
for PORT in $OPEN_PORT; do
    $IPCMD -A INPUT -i $EXT_IF -p tcp --dport $PORT -j ACCEPT
    $IPCMD -A INPUT -i $EXT_IF -p udp --dport $PORT -j ACCEPT
    $IPCMD -A INPUT -p tcp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
    $IPCMD -A INPUT -p udp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
    $IPCMD -A OUTPUT -o $EXT_IF -p tcp --dport $PORT -j ACCEPT
    $IPCMD -A OUTPUT -o $EXT_IF -p udp --dport $PORT -j ACCEPT
    $IPCMD -A OUTPUT -p tcp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
    $IPCMD -A OUTPUT -p udp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
    $IPCMD -A FORWARD -i $EXT_IF -p tcp --dport $PORT -j ACCEPT
    $IPCMD -A FORWARD -i $EXT_IF -p udp --dport $PORT -j ACCEPT
    $IPCMD -A FORWARD -p tcp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
    $IPCMD -A FORWARD -p udp --sport $HI -d $EXT_IP --dport $PORT -j ACCEPT
done

$IPCMD -A PREROUTING -t mangle -p tcp --dport 80 -j TOS --set-tos 16
$IPCMD -A PREROUTING -t mangle -p tcp --dport 443 -j TOS --set-tos 16
$IPCMD -A PREROUTING -t mangle -p tcp --dport 53 -j TOS --set-tos 8
$IPCMD -A PREROUTING -t mangle -p udp --dport 53 -j TOS --set-tos 16


## List rules @ end line
echo "## Check All Rules"
$IPCMD -S

if [ -e "$IP_SAVE_FILE" ]; then
  echo ""
  echo ""
  echo "Please also take care no duplicate rules from imports. $IP_SAVE_FILE"
fi
dump "Iptalbes was applied."


if [ -n "$DEBUG_ONLY" ] ; then
    if [ -z "$DEBUG_SEC" ] ; then
        DEBUG_SEC=60;
    fi
    dump "Iptalbes Debug mode enable will reset after ${DEBUG_SEC}secs... Press ctrl+c to cancel reset."
    sleep $DEBUG_SEC;
    dump "Iptalbes was reset."
    initialize
fi

exit 0;
